#!/bin/bash
RELEASE_URL="https://github.com/witnesschain-com/dcl-operator-cli/releases/download/v0.0.8"
APP_NAME="witness-cli"

CHALLENGER_CONFIG_URL="https://raw.githubusercontent.com/witnesschain-com/dcl-operator-cli/main/dcl-operator/operator-challenger-config.json.template"
PROVER_CONFIG_URL="https://raw.githubusercontent.com/witnesschain-com/dcl-operator-cli/main/dcl-operator/operator-prover-config.json.template"

print_hr() {
    local length=${1:-30}  # Default length of the horizontal line
    local char=${2:-"-"}   # Default character for the line
    
    for ((i=1; i<=$length; i++)); do
        printf "%s" "$char"
    done
    printf "\n"
}

print_title() {
    local title="$1"
    local length=${#title}
    print_hr $length "="
    echo "$title"
    print_hr $length "="
}

print_error() {
    local message="$@"
    printf "%s" "$(tput setaf 1)$message$(tput sgr0)" >&2
}

print_info() {
    local message="$@"
    printf "%s" "$(tput setaf 3)$message$(tput sgr0)"
}

print_success() {
    local message="$@"
    printf "%s" "$(tput setaf 2)$message$(tput sgr0)"
}

print_hr 40
printf "\n"
print_title "Setting up WitnessChain CLI"

printf "\n- Platform Details:\n"
PLATFORM=$(uname)
ARCH=$(uname -m)

if [ "$PLATFORM" = "Linux" ] && [ "$ARCH" = "x86_64" ]; then
    print_success "    Operating System: Linux"
    printf "\n"
    print_success "    Architecture: x86_64"
    printf "\n"
    BINARY_NAME="witnesschain-cli_linux_x86_64"
elif [ "$PLATFORM" = "Darwin" ] && [ "$ARCH" = "arm64" ]; then
    print_success "    Operating Systems: macOS\n"
    printf "\n"
    print_success "    Architecture: arm64\n"
    printf "\n"
    BINARY_NAME="witnesschain-cli_apple_silicon"
else
    print_error " Unable to identify platform for the binaries, please setup manually"
    printf "\n"
    print_hr 40
    exit 1
fi

mkdir -p ~/.witnesschain
PATH_TO_CLI="$HOME/.witnesschain"

if [ $? != 0 ]; then
    print_info " üü° Unable to create .witnesschain directory at home, going forward with current directory\n\n"
    PATH_TO_CLI="."
fi

cd "$PATH_TO_CLI" || exit

mkdir -p config

printf "\n"
curl -s -fSL -o "config/operator-challenger-config.json.template" "$CHALLENGER_CONFIG_URL"

if [ $? != 0 ]; then
    print_error "  ‚ùå Error downloading Challenger template. please refer docs.."
fi
print_info "challenger config template: $PWD/config/operator-challenger-config.json.template"

printf "\n"
curl -s -fSL -o "config/operator-prover-config.json.template" "$PROVER_CONFIG_URL"

if [ $? != 0 ]; then
    print_error "  ‚ùå Unable to download prover configuration file."
    printf "\n"
fi

print_info "Prover config template: $PWD/config/operator-prover-config.json.template"
printf "\n"

printf "\n\n- üèÉ Downloading $APP_NAME ($RELEASE_URL/$BINARY_NAME)...\n"
curl -# -fSL  -o "$APP_NAME" "$RELEASE_URL/$BINARY_NAME"
if [ $? = 0 ]; then
    print_success "  ‚úÖ Download completed. "
    
else
    print_error "  ‚ùå Error downloading the binaries. exiting.."
    printf "\n"
    print_hr 40
    exit 1
fi

chmod +x "$APP_NAME"
if [ $? != 0 ]; then
    print_error "  Unable to set executable permission for $PWD/$APP_NAME"
    printf "\n"
    print_hr 40
    exit 1
fi

# mkdir -p ~/.local/bin
# if [ $? != 0 ]; then
#     print_error "  Unable to create ~/.local/bin"
#     printf "\n"
#     print_hr 40
#     exit 1
# fi


# mv "$APP_NAME" ~/.local/bin/
# if [ $? = 0 ]; then
#     print_success "Installation successful. $APP_NAME installed in $PWD/$APP_NAME"
#     printf "\n\n\n"
# else
#     print_error "Unable to move $APP_NAME to ~/.local/bin "
#     printf "\n"
#     print_hr 40
#     exit 1
# fi
    printf "\n\n\n"

print_success "‚úÖ Installation successful. $APP_NAME installed in ~/.witnesschain"
    printf "\n\n\n"

print_info "Add this installation location to PATH env var (or paste this line in your shell condig eg. ~/.bashrc or ~/.zshrc)"
printf "\n\n\n\n"
printf "export PATH=$HOME/.witnesschain:\$PATH"

printf "\n\n\n\n"
print_info "You can confirm the cli installation by running the following"
printf "\n\n"
print_info "$APP_NAME --version"
printf "\n\n\n"
